
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADDITION ADD_ASSIGN AND ASSIGN COLON COMMA DIV DIV_ASSIGN EQUAL FALSE GT GTE ID LBRACE LET LOOP LPAREN LT LTE MOD MUL MUL_ASSIGN MUT NEQ NUM OR RBRACE RPAREN SEMICOLON SUB SUB_ASSIGN TRUE TYPE WHILEstatements : declaration statements\n                | whileloop statements\n                | doloop statements\n                | expression statements\n                | declaration : LET var_list SEMICOLON\n                    | LET MUT var_list SEMICOLONfactor : ID\n            | NUM\n    doloop : LOOP LBRACE statements RBRACE conditionsp : conditions AND conditions\n                    | conditions OR conditions\n                    | conditions\n                    | TRUE\n                    | FALSE\n                    conditions : factor GT factor\n                | factor LT factor\n                | factor GTE factor\n                | factor LTE factor\n                | factor EQUAL factor\n                | factor NEQ factor\n                expression : ID ASSIGN exp SEMICOLON\n                | ID ADD_ASSIGN exp SEMICOLON\n                | ID SUB_ASSIGN exp SEMICOLON\n                | ID DIV_ASSIGN exp SEMICOLON\n                | ID MUL_ASSIGN exp SEMICOLON\n                exp : exp ADDITION exp\n        | exp SUB exp\n        | exp MUL exp\n        | exp DIV exp\n        | exp MOD exp\n        | LPAREN exp RPAREN\n        | factorwhileloop : WHILE conditionsp LBRACE statements RBRACEvar_list : ID\n                | ID COLON TYPE\n                | ID COLON TYPE COMMA var_list\n                | ID COMMA var_list\n    '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,10,11,12,13,30,51,63,64,71,72,73,74,76,],[-5,0,-5,-5,-5,-5,-1,-2,-3,-4,-6,-7,-10,-22,-23,-24,-25,-26,-34,]),'LET':([0,2,3,4,5,24,30,34,51,63,64,71,72,73,74,76,],[6,6,6,6,6,6,-6,6,-7,-10,-22,-23,-24,-25,-26,-34,]),'WHILE':([0,2,3,4,5,24,30,34,51,63,64,71,72,73,74,76,],[7,7,7,7,7,7,-6,7,-7,-10,-22,-23,-24,-25,-26,-34,]),'LOOP':([0,2,3,4,5,24,30,34,51,63,64,71,72,73,74,76,],[8,8,8,8,8,8,-6,8,-7,-10,-22,-23,-24,-25,-26,-34,]),'ID':([0,2,3,4,5,6,7,15,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,45,51,63,64,65,66,67,68,69,71,72,73,74,75,76,],[9,9,9,9,9,16,22,16,9,22,22,22,22,22,-6,16,9,22,22,22,22,22,22,22,22,22,-7,-10,-22,22,22,22,22,22,-23,-24,-25,-26,16,-34,]),'RBRACE':([2,3,4,5,10,11,12,13,24,30,34,43,51,54,63,64,71,72,73,74,76,],[-5,-5,-5,-5,-1,-2,-3,-4,-5,-6,-5,63,-7,76,-10,-22,-23,-24,-25,-26,-34,]),'MUT':([6,],[15,]),'TRUE':([7,],[19,]),'FALSE':([7,],[20,]),'NUM':([7,25,26,27,28,29,35,36,37,38,39,40,41,42,45,65,66,67,68,69,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'LBRACE':([8,17,18,19,20,22,23,55,56,57,58,59,60,61,62,],[24,34,-13,-14,-15,-8,-9,-11,-12,-16,-17,-18,-19,-20,-21,]),'ASSIGN':([9,],[25,]),'ADD_ASSIGN':([9,],[26,]),'SUB_ASSIGN':([9,],[27,]),'DIV_ASSIGN':([9,],[28,]),'MUL_ASSIGN':([9,],[29,]),'SEMICOLON':([14,16,22,23,31,44,46,47,48,49,50,52,53,77,78,79,80,81,82,83,],[30,-35,-8,-9,51,64,-33,71,72,73,74,-36,-38,-27,-28,-29,-30,-31,-32,-37,]),'COLON':([16,],[32,]),'COMMA':([16,52,],[33,75,]),'AND':([18,22,23,57,58,59,60,61,62,],[35,-8,-9,-16,-17,-18,-19,-20,-21,]),'OR':([18,22,23,57,58,59,60,61,62,],[36,-8,-9,-16,-17,-18,-19,-20,-21,]),'GT':([21,22,23,],[37,-8,-9,]),'LT':([21,22,23,],[38,-8,-9,]),'GTE':([21,22,23,],[39,-8,-9,]),'LTE':([21,22,23,],[40,-8,-9,]),'EQUAL':([21,22,23,],[41,-8,-9,]),'NEQ':([21,22,23,],[42,-8,-9,]),'ADDITION':([22,23,44,46,47,48,49,50,70,77,78,79,80,81,82,],[-8,-9,65,-33,65,65,65,65,65,65,65,65,65,65,-32,]),'SUB':([22,23,44,46,47,48,49,50,70,77,78,79,80,81,82,],[-8,-9,66,-33,66,66,66,66,66,66,66,66,66,66,-32,]),'MUL':([22,23,44,46,47,48,49,50,70,77,78,79,80,81,82,],[-8,-9,67,-33,67,67,67,67,67,67,67,67,67,67,-32,]),'DIV':([22,23,44,46,47,48,49,50,70,77,78,79,80,81,82,],[-8,-9,68,-33,68,68,68,68,68,68,68,68,68,68,-32,]),'MOD':([22,23,44,46,47,48,49,50,70,77,78,79,80,81,82,],[-8,-9,69,-33,69,69,69,69,69,69,69,69,69,69,-32,]),'RPAREN':([22,23,46,70,77,78,79,80,81,82,],[-8,-9,-33,82,-27,-28,-29,-30,-31,-32,]),'LPAREN':([25,26,27,28,29,45,65,66,67,68,69,],[45,45,45,45,45,45,45,45,45,45,45,]),'TYPE':([32,],[52,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,2,3,4,5,24,34,],[1,10,11,12,13,43,54,]),'declaration':([0,2,3,4,5,24,34,],[2,2,2,2,2,2,2,]),'whileloop':([0,2,3,4,5,24,34,],[3,3,3,3,3,3,3,]),'doloop':([0,2,3,4,5,24,34,],[4,4,4,4,4,4,4,]),'expression':([0,2,3,4,5,24,34,],[5,5,5,5,5,5,5,]),'var_list':([6,15,33,75,],[14,31,53,83,]),'conditionsp':([7,],[17,]),'conditions':([7,35,36,],[18,55,56,]),'factor':([7,25,26,27,28,29,35,36,37,38,39,40,41,42,45,65,66,67,68,69,],[21,46,46,46,46,46,21,21,57,58,59,60,61,62,46,46,46,46,46,46,]),'exp':([25,26,27,28,29,45,65,66,67,68,69,],[44,47,48,49,50,70,77,78,79,80,81,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statements","S'",1,None,None,None),
  ('statements -> declaration statements','statements',2,'p_statements','parser_rust.py',5),
  ('statements -> whileloop statements','statements',2,'p_statements','parser_rust.py',6),
  ('statements -> doloop statements','statements',2,'p_statements','parser_rust.py',7),
  ('statements -> expression statements','statements',2,'p_statements','parser_rust.py',8),
  ('statements -> <empty>','statements',0,'p_statements','parser_rust.py',9),
  ('declaration -> LET var_list SEMICOLON','declaration',3,'p_declaration','parser_rust.py',12),
  ('declaration -> LET MUT var_list SEMICOLON','declaration',4,'p_declaration','parser_rust.py',13),
  ('factor -> ID','factor',1,'p_factor','parser_rust.py',17),
  ('factor -> NUM','factor',1,'p_factor','parser_rust.py',18),
  ('doloop -> LOOP LBRACE statements RBRACE','doloop',4,'p_doloop','parser_rust.py',22),
  ('conditionsp -> conditions AND conditions','conditionsp',3,'p_conditionsp','parser_rust.py',25),
  ('conditionsp -> conditions OR conditions','conditionsp',3,'p_conditionsp','parser_rust.py',26),
  ('conditionsp -> conditions','conditionsp',1,'p_conditionsp','parser_rust.py',27),
  ('conditionsp -> TRUE','conditionsp',1,'p_conditionsp','parser_rust.py',28),
  ('conditionsp -> FALSE','conditionsp',1,'p_conditionsp','parser_rust.py',29),
  ('conditions -> factor GT factor','conditions',3,'p_conditions','parser_rust.py',33),
  ('conditions -> factor LT factor','conditions',3,'p_conditions','parser_rust.py',34),
  ('conditions -> factor GTE factor','conditions',3,'p_conditions','parser_rust.py',35),
  ('conditions -> factor LTE factor','conditions',3,'p_conditions','parser_rust.py',36),
  ('conditions -> factor EQUAL factor','conditions',3,'p_conditions','parser_rust.py',37),
  ('conditions -> factor NEQ factor','conditions',3,'p_conditions','parser_rust.py',38),
  ('expression -> ID ASSIGN exp SEMICOLON','expression',4,'p_expression','parser_rust.py',42),
  ('expression -> ID ADD_ASSIGN exp SEMICOLON','expression',4,'p_expression','parser_rust.py',43),
  ('expression -> ID SUB_ASSIGN exp SEMICOLON','expression',4,'p_expression','parser_rust.py',44),
  ('expression -> ID DIV_ASSIGN exp SEMICOLON','expression',4,'p_expression','parser_rust.py',45),
  ('expression -> ID MUL_ASSIGN exp SEMICOLON','expression',4,'p_expression','parser_rust.py',46),
  ('exp -> exp ADDITION exp','exp',3,'p_exp','parser_rust.py',51),
  ('exp -> exp SUB exp','exp',3,'p_exp','parser_rust.py',52),
  ('exp -> exp MUL exp','exp',3,'p_exp','parser_rust.py',53),
  ('exp -> exp DIV exp','exp',3,'p_exp','parser_rust.py',54),
  ('exp -> exp MOD exp','exp',3,'p_exp','parser_rust.py',55),
  ('exp -> LPAREN exp RPAREN','exp',3,'p_exp','parser_rust.py',56),
  ('exp -> factor','exp',1,'p_exp','parser_rust.py',57),
  ('whileloop -> WHILE conditionsp LBRACE statements RBRACE','whileloop',5,'p_whileloop','parser_rust.py',61),
  ('var_list -> ID','var_list',1,'p_var_list','parser_rust.py',65),
  ('var_list -> ID COLON TYPE','var_list',3,'p_var_list','parser_rust.py',66),
  ('var_list -> ID COLON TYPE COMMA var_list','var_list',5,'p_var_list','parser_rust.py',67),
  ('var_list -> ID COMMA var_list','var_list',3,'p_var_list','parser_rust.py',68),
]
