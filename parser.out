Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statements
Rule 1     statements -> declaration statements
Rule 2     statements -> whileloop statements
Rule 3     statements -> doloop statements
Rule 4     statements -> expression statements
Rule 5     statements -> <empty>
Rule 6     declaration -> LET var_list SEMICOLON
Rule 7     declaration -> LET MUT var_list SEMICOLON
Rule 8     factor -> ID
Rule 9     factor -> NUM
Rule 10    doloop -> LOOP LBRACE statements RBRACE
Rule 11    conditionsp -> conditions AND conditions
Rule 12    conditionsp -> conditions OR conditions
Rule 13    conditionsp -> conditions
Rule 14    conditionsp -> TRUE
Rule 15    conditionsp -> FALSE
Rule 16    conditions -> factor GT factor
Rule 17    conditions -> factor LT factor
Rule 18    conditions -> factor GTE factor
Rule 19    conditions -> factor LTE factor
Rule 20    conditions -> factor EQUAL factor
Rule 21    conditions -> factor NEQ factor
Rule 22    expression -> ID ASSIGN exp SEMICOLON
Rule 23    expression -> ID ADD_ASSIGN exp SEMICOLON
Rule 24    expression -> ID SUB_ASSIGN exp SEMICOLON
Rule 25    expression -> ID DIV_ASSIGN exp SEMICOLON
Rule 26    expression -> ID MUL_ASSIGN exp SEMICOLON
Rule 27    exp -> exp ADDITION exp
Rule 28    exp -> exp SUB exp
Rule 29    exp -> exp MUL exp
Rule 30    exp -> exp DIV exp
Rule 31    exp -> exp MOD exp
Rule 32    exp -> LPAREN exp RPAREN
Rule 33    exp -> factor
Rule 34    whileloop -> WHILE conditionsp LBRACE statements RBRACE
Rule 35    var_list -> ID
Rule 36    var_list -> ID COLON TYPE
Rule 37    var_list -> ID COLON TYPE COMMA var_list
Rule 38    var_list -> ID COMMA var_list

Terminals, with rules where they appear

ADDITION             : 27
ADD_ASSIGN           : 23
AND                  : 11
ASSIGN               : 22
COLON                : 36 37
COMMA                : 37 38
DIV                  : 30
DIV_ASSIGN           : 25
EQUAL                : 20
FALSE                : 15
GT                   : 16
GTE                  : 18
ID                   : 8 22 23 24 25 26 35 36 37 38
LBRACE               : 10 34
LET                  : 6 7
LOOP                 : 10
LPAREN               : 32
LT                   : 17
LTE                  : 19
MOD                  : 31
MUL                  : 29
MUL_ASSIGN           : 26
MUT                  : 7
NEQ                  : 21
NUM                  : 9
OR                   : 12
RBRACE               : 10 34
RPAREN               : 32
SEMICOLON            : 6 7 22 23 24 25 26
SUB                  : 28
SUB_ASSIGN           : 24
TRUE                 : 14
TYPE                 : 36 37
WHILE                : 34
error                : 

Nonterminals, with rules where they appear

conditions           : 11 11 12 12 13
conditionsp          : 34
declaration          : 1
doloop               : 3
exp                  : 22 23 24 25 26 27 27 28 28 29 29 30 30 31 31 32
expression           : 4
factor               : 16 16 17 17 18 18 19 19 20 20 21 21 33
statements           : 1 2 3 4 10 34 0
var_list             : 6 7 37 38
whileloop            : 2

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . declaration statements
    (2) statements -> . whileloop statements
    (3) statements -> . doloop statements
    (4) statements -> . expression statements
    (5) statements -> .
    (6) declaration -> . LET var_list SEMICOLON
    (7) declaration -> . LET MUT var_list SEMICOLON
    (34) whileloop -> . WHILE conditionsp LBRACE statements RBRACE
    (10) doloop -> . LOOP LBRACE statements RBRACE
    (22) expression -> . ID ASSIGN exp SEMICOLON
    (23) expression -> . ID ADD_ASSIGN exp SEMICOLON
    (24) expression -> . ID SUB_ASSIGN exp SEMICOLON
    (25) expression -> . ID DIV_ASSIGN exp SEMICOLON
    (26) expression -> . ID MUL_ASSIGN exp SEMICOLON

    $end            reduce using rule 5 (statements -> .)
    LET             shift and go to state 6
    WHILE           shift and go to state 7
    LOOP            shift and go to state 8
    ID              shift and go to state 9

    statements                     shift and go to state 1
    declaration                    shift and go to state 2
    whileloop                      shift and go to state 3
    doloop                         shift and go to state 4
    expression                     shift and go to state 5

state 1

    (0) S' -> statements .



state 2

    (1) statements -> declaration . statements
    (1) statements -> . declaration statements
    (2) statements -> . whileloop statements
    (3) statements -> . doloop statements
    (4) statements -> . expression statements
    (5) statements -> .
    (6) declaration -> . LET var_list SEMICOLON
    (7) declaration -> . LET MUT var_list SEMICOLON
    (34) whileloop -> . WHILE conditionsp LBRACE statements RBRACE
    (10) doloop -> . LOOP LBRACE statements RBRACE
    (22) expression -> . ID ASSIGN exp SEMICOLON
    (23) expression -> . ID ADD_ASSIGN exp SEMICOLON
    (24) expression -> . ID SUB_ASSIGN exp SEMICOLON
    (25) expression -> . ID DIV_ASSIGN exp SEMICOLON
    (26) expression -> . ID MUL_ASSIGN exp SEMICOLON

    $end            reduce using rule 5 (statements -> .)
    RBRACE          reduce using rule 5 (statements -> .)
    LET             shift and go to state 6
    WHILE           shift and go to state 7
    LOOP            shift and go to state 8
    ID              shift and go to state 9

    declaration                    shift and go to state 2
    statements                     shift and go to state 10
    whileloop                      shift and go to state 3
    doloop                         shift and go to state 4
    expression                     shift and go to state 5

state 3

    (2) statements -> whileloop . statements
    (1) statements -> . declaration statements
    (2) statements -> . whileloop statements
    (3) statements -> . doloop statements
    (4) statements -> . expression statements
    (5) statements -> .
    (6) declaration -> . LET var_list SEMICOLON
    (7) declaration -> . LET MUT var_list SEMICOLON
    (34) whileloop -> . WHILE conditionsp LBRACE statements RBRACE
    (10) doloop -> . LOOP LBRACE statements RBRACE
    (22) expression -> . ID ASSIGN exp SEMICOLON
    (23) expression -> . ID ADD_ASSIGN exp SEMICOLON
    (24) expression -> . ID SUB_ASSIGN exp SEMICOLON
    (25) expression -> . ID DIV_ASSIGN exp SEMICOLON
    (26) expression -> . ID MUL_ASSIGN exp SEMICOLON

    $end            reduce using rule 5 (statements -> .)
    RBRACE          reduce using rule 5 (statements -> .)
    LET             shift and go to state 6
    WHILE           shift and go to state 7
    LOOP            shift and go to state 8
    ID              shift and go to state 9

    whileloop                      shift and go to state 3
    statements                     shift and go to state 11
    declaration                    shift and go to state 2
    doloop                         shift and go to state 4
    expression                     shift and go to state 5

state 4

    (3) statements -> doloop . statements
    (1) statements -> . declaration statements
    (2) statements -> . whileloop statements
    (3) statements -> . doloop statements
    (4) statements -> . expression statements
    (5) statements -> .
    (6) declaration -> . LET var_list SEMICOLON
    (7) declaration -> . LET MUT var_list SEMICOLON
    (34) whileloop -> . WHILE conditionsp LBRACE statements RBRACE
    (10) doloop -> . LOOP LBRACE statements RBRACE
    (22) expression -> . ID ASSIGN exp SEMICOLON
    (23) expression -> . ID ADD_ASSIGN exp SEMICOLON
    (24) expression -> . ID SUB_ASSIGN exp SEMICOLON
    (25) expression -> . ID DIV_ASSIGN exp SEMICOLON
    (26) expression -> . ID MUL_ASSIGN exp SEMICOLON

    $end            reduce using rule 5 (statements -> .)
    RBRACE          reduce using rule 5 (statements -> .)
    LET             shift and go to state 6
    WHILE           shift and go to state 7
    LOOP            shift and go to state 8
    ID              shift and go to state 9

    doloop                         shift and go to state 4
    statements                     shift and go to state 12
    declaration                    shift and go to state 2
    whileloop                      shift and go to state 3
    expression                     shift and go to state 5

state 5

    (4) statements -> expression . statements
    (1) statements -> . declaration statements
    (2) statements -> . whileloop statements
    (3) statements -> . doloop statements
    (4) statements -> . expression statements
    (5) statements -> .
    (6) declaration -> . LET var_list SEMICOLON
    (7) declaration -> . LET MUT var_list SEMICOLON
    (34) whileloop -> . WHILE conditionsp LBRACE statements RBRACE
    (10) doloop -> . LOOP LBRACE statements RBRACE
    (22) expression -> . ID ASSIGN exp SEMICOLON
    (23) expression -> . ID ADD_ASSIGN exp SEMICOLON
    (24) expression -> . ID SUB_ASSIGN exp SEMICOLON
    (25) expression -> . ID DIV_ASSIGN exp SEMICOLON
    (26) expression -> . ID MUL_ASSIGN exp SEMICOLON

    $end            reduce using rule 5 (statements -> .)
    RBRACE          reduce using rule 5 (statements -> .)
    LET             shift and go to state 6
    WHILE           shift and go to state 7
    LOOP            shift and go to state 8
    ID              shift and go to state 9

    expression                     shift and go to state 5
    statements                     shift and go to state 13
    declaration                    shift and go to state 2
    whileloop                      shift and go to state 3
    doloop                         shift and go to state 4

state 6

    (6) declaration -> LET . var_list SEMICOLON
    (7) declaration -> LET . MUT var_list SEMICOLON
    (35) var_list -> . ID
    (36) var_list -> . ID COLON TYPE
    (37) var_list -> . ID COLON TYPE COMMA var_list
    (38) var_list -> . ID COMMA var_list

    MUT             shift and go to state 15
    ID              shift and go to state 16

    var_list                       shift and go to state 14

state 7

    (34) whileloop -> WHILE . conditionsp LBRACE statements RBRACE
    (11) conditionsp -> . conditions AND conditions
    (12) conditionsp -> . conditions OR conditions
    (13) conditionsp -> . conditions
    (14) conditionsp -> . TRUE
    (15) conditionsp -> . FALSE
    (16) conditions -> . factor GT factor
    (17) conditions -> . factor LT factor
    (18) conditions -> . factor GTE factor
    (19) conditions -> . factor LTE factor
    (20) conditions -> . factor EQUAL factor
    (21) conditions -> . factor NEQ factor
    (8) factor -> . ID
    (9) factor -> . NUM

    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    ID              shift and go to state 22
    NUM             shift and go to state 23

    conditionsp                    shift and go to state 17
    conditions                     shift and go to state 18
    factor                         shift and go to state 21

state 8

    (10) doloop -> LOOP . LBRACE statements RBRACE

    LBRACE          shift and go to state 24


state 9

    (22) expression -> ID . ASSIGN exp SEMICOLON
    (23) expression -> ID . ADD_ASSIGN exp SEMICOLON
    (24) expression -> ID . SUB_ASSIGN exp SEMICOLON
    (25) expression -> ID . DIV_ASSIGN exp SEMICOLON
    (26) expression -> ID . MUL_ASSIGN exp SEMICOLON

    ASSIGN          shift and go to state 25
    ADD_ASSIGN      shift and go to state 26
    SUB_ASSIGN      shift and go to state 27
    DIV_ASSIGN      shift and go to state 28
    MUL_ASSIGN      shift and go to state 29


state 10

    (1) statements -> declaration statements .

    $end            reduce using rule 1 (statements -> declaration statements .)
    RBRACE          reduce using rule 1 (statements -> declaration statements .)


state 11

    (2) statements -> whileloop statements .

    $end            reduce using rule 2 (statements -> whileloop statements .)
    RBRACE          reduce using rule 2 (statements -> whileloop statements .)


state 12

    (3) statements -> doloop statements .

    $end            reduce using rule 3 (statements -> doloop statements .)
    RBRACE          reduce using rule 3 (statements -> doloop statements .)


state 13

    (4) statements -> expression statements .

    $end            reduce using rule 4 (statements -> expression statements .)
    RBRACE          reduce using rule 4 (statements -> expression statements .)


state 14

    (6) declaration -> LET var_list . SEMICOLON

    SEMICOLON       shift and go to state 30


state 15

    (7) declaration -> LET MUT . var_list SEMICOLON
    (35) var_list -> . ID
    (36) var_list -> . ID COLON TYPE
    (37) var_list -> . ID COLON TYPE COMMA var_list
    (38) var_list -> . ID COMMA var_list

    ID              shift and go to state 16

    var_list                       shift and go to state 31

state 16

    (35) var_list -> ID .
    (36) var_list -> ID . COLON TYPE
    (37) var_list -> ID . COLON TYPE COMMA var_list
    (38) var_list -> ID . COMMA var_list

    SEMICOLON       reduce using rule 35 (var_list -> ID .)
    COLON           shift and go to state 32
    COMMA           shift and go to state 33


state 17

    (34) whileloop -> WHILE conditionsp . LBRACE statements RBRACE

    LBRACE          shift and go to state 34


state 18

    (11) conditionsp -> conditions . AND conditions
    (12) conditionsp -> conditions . OR conditions
    (13) conditionsp -> conditions .

    AND             shift and go to state 35
    OR              shift and go to state 36
    LBRACE          reduce using rule 13 (conditionsp -> conditions .)


state 19

    (14) conditionsp -> TRUE .

    LBRACE          reduce using rule 14 (conditionsp -> TRUE .)


state 20

    (15) conditionsp -> FALSE .

    LBRACE          reduce using rule 15 (conditionsp -> FALSE .)


state 21

    (16) conditions -> factor . GT factor
    (17) conditions -> factor . LT factor
    (18) conditions -> factor . GTE factor
    (19) conditions -> factor . LTE factor
    (20) conditions -> factor . EQUAL factor
    (21) conditions -> factor . NEQ factor

    GT              shift and go to state 37
    LT              shift and go to state 38
    GTE             shift and go to state 39
    LTE             shift and go to state 40
    EQUAL           shift and go to state 41
    NEQ             shift and go to state 42


state 22

    (8) factor -> ID .

    GT              reduce using rule 8 (factor -> ID .)
    LT              reduce using rule 8 (factor -> ID .)
    GTE             reduce using rule 8 (factor -> ID .)
    LTE             reduce using rule 8 (factor -> ID .)
    EQUAL           reduce using rule 8 (factor -> ID .)
    NEQ             reduce using rule 8 (factor -> ID .)
    SEMICOLON       reduce using rule 8 (factor -> ID .)
    ADDITION        reduce using rule 8 (factor -> ID .)
    SUB             reduce using rule 8 (factor -> ID .)
    MUL             reduce using rule 8 (factor -> ID .)
    DIV             reduce using rule 8 (factor -> ID .)
    MOD             reduce using rule 8 (factor -> ID .)
    AND             reduce using rule 8 (factor -> ID .)
    OR              reduce using rule 8 (factor -> ID .)
    LBRACE          reduce using rule 8 (factor -> ID .)
    RPAREN          reduce using rule 8 (factor -> ID .)


state 23

    (9) factor -> NUM .

    GT              reduce using rule 9 (factor -> NUM .)
    LT              reduce using rule 9 (factor -> NUM .)
    GTE             reduce using rule 9 (factor -> NUM .)
    LTE             reduce using rule 9 (factor -> NUM .)
    EQUAL           reduce using rule 9 (factor -> NUM .)
    NEQ             reduce using rule 9 (factor -> NUM .)
    SEMICOLON       reduce using rule 9 (factor -> NUM .)
    ADDITION        reduce using rule 9 (factor -> NUM .)
    SUB             reduce using rule 9 (factor -> NUM .)
    MUL             reduce using rule 9 (factor -> NUM .)
    DIV             reduce using rule 9 (factor -> NUM .)
    MOD             reduce using rule 9 (factor -> NUM .)
    AND             reduce using rule 9 (factor -> NUM .)
    OR              reduce using rule 9 (factor -> NUM .)
    LBRACE          reduce using rule 9 (factor -> NUM .)
    RPAREN          reduce using rule 9 (factor -> NUM .)


state 24

    (10) doloop -> LOOP LBRACE . statements RBRACE
    (1) statements -> . declaration statements
    (2) statements -> . whileloop statements
    (3) statements -> . doloop statements
    (4) statements -> . expression statements
    (5) statements -> .
    (6) declaration -> . LET var_list SEMICOLON
    (7) declaration -> . LET MUT var_list SEMICOLON
    (34) whileloop -> . WHILE conditionsp LBRACE statements RBRACE
    (10) doloop -> . LOOP LBRACE statements RBRACE
    (22) expression -> . ID ASSIGN exp SEMICOLON
    (23) expression -> . ID ADD_ASSIGN exp SEMICOLON
    (24) expression -> . ID SUB_ASSIGN exp SEMICOLON
    (25) expression -> . ID DIV_ASSIGN exp SEMICOLON
    (26) expression -> . ID MUL_ASSIGN exp SEMICOLON

    RBRACE          reduce using rule 5 (statements -> .)
    LET             shift and go to state 6
    WHILE           shift and go to state 7
    LOOP            shift and go to state 8
    ID              shift and go to state 9

    statements                     shift and go to state 43
    declaration                    shift and go to state 2
    whileloop                      shift and go to state 3
    doloop                         shift and go to state 4
    expression                     shift and go to state 5

state 25

    (22) expression -> ID ASSIGN . exp SEMICOLON
    (27) exp -> . exp ADDITION exp
    (28) exp -> . exp SUB exp
    (29) exp -> . exp MUL exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . factor
    (8) factor -> . ID
    (9) factor -> . NUM

    LPAREN          shift and go to state 45
    ID              shift and go to state 22
    NUM             shift and go to state 23

    exp                            shift and go to state 44
    factor                         shift and go to state 46

state 26

    (23) expression -> ID ADD_ASSIGN . exp SEMICOLON
    (27) exp -> . exp ADDITION exp
    (28) exp -> . exp SUB exp
    (29) exp -> . exp MUL exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . factor
    (8) factor -> . ID
    (9) factor -> . NUM

    LPAREN          shift and go to state 45
    ID              shift and go to state 22
    NUM             shift and go to state 23

    exp                            shift and go to state 47
    factor                         shift and go to state 46

state 27

    (24) expression -> ID SUB_ASSIGN . exp SEMICOLON
    (27) exp -> . exp ADDITION exp
    (28) exp -> . exp SUB exp
    (29) exp -> . exp MUL exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . factor
    (8) factor -> . ID
    (9) factor -> . NUM

    LPAREN          shift and go to state 45
    ID              shift and go to state 22
    NUM             shift and go to state 23

    exp                            shift and go to state 48
    factor                         shift and go to state 46

state 28

    (25) expression -> ID DIV_ASSIGN . exp SEMICOLON
    (27) exp -> . exp ADDITION exp
    (28) exp -> . exp SUB exp
    (29) exp -> . exp MUL exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . factor
    (8) factor -> . ID
    (9) factor -> . NUM

    LPAREN          shift and go to state 45
    ID              shift and go to state 22
    NUM             shift and go to state 23

    exp                            shift and go to state 49
    factor                         shift and go to state 46

state 29

    (26) expression -> ID MUL_ASSIGN . exp SEMICOLON
    (27) exp -> . exp ADDITION exp
    (28) exp -> . exp SUB exp
    (29) exp -> . exp MUL exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . factor
    (8) factor -> . ID
    (9) factor -> . NUM

    LPAREN          shift and go to state 45
    ID              shift and go to state 22
    NUM             shift and go to state 23

    exp                            shift and go to state 50
    factor                         shift and go to state 46

state 30

    (6) declaration -> LET var_list SEMICOLON .

    LET             reduce using rule 6 (declaration -> LET var_list SEMICOLON .)
    WHILE           reduce using rule 6 (declaration -> LET var_list SEMICOLON .)
    LOOP            reduce using rule 6 (declaration -> LET var_list SEMICOLON .)
    ID              reduce using rule 6 (declaration -> LET var_list SEMICOLON .)
    $end            reduce using rule 6 (declaration -> LET var_list SEMICOLON .)
    RBRACE          reduce using rule 6 (declaration -> LET var_list SEMICOLON .)


state 31

    (7) declaration -> LET MUT var_list . SEMICOLON

    SEMICOLON       shift and go to state 51


state 32

    (36) var_list -> ID COLON . TYPE
    (37) var_list -> ID COLON . TYPE COMMA var_list

    TYPE            shift and go to state 52


state 33

    (38) var_list -> ID COMMA . var_list
    (35) var_list -> . ID
    (36) var_list -> . ID COLON TYPE
    (37) var_list -> . ID COLON TYPE COMMA var_list
    (38) var_list -> . ID COMMA var_list

    ID              shift and go to state 16

    var_list                       shift and go to state 53

state 34

    (34) whileloop -> WHILE conditionsp LBRACE . statements RBRACE
    (1) statements -> . declaration statements
    (2) statements -> . whileloop statements
    (3) statements -> . doloop statements
    (4) statements -> . expression statements
    (5) statements -> .
    (6) declaration -> . LET var_list SEMICOLON
    (7) declaration -> . LET MUT var_list SEMICOLON
    (34) whileloop -> . WHILE conditionsp LBRACE statements RBRACE
    (10) doloop -> . LOOP LBRACE statements RBRACE
    (22) expression -> . ID ASSIGN exp SEMICOLON
    (23) expression -> . ID ADD_ASSIGN exp SEMICOLON
    (24) expression -> . ID SUB_ASSIGN exp SEMICOLON
    (25) expression -> . ID DIV_ASSIGN exp SEMICOLON
    (26) expression -> . ID MUL_ASSIGN exp SEMICOLON

    RBRACE          reduce using rule 5 (statements -> .)
    LET             shift and go to state 6
    WHILE           shift and go to state 7
    LOOP            shift and go to state 8
    ID              shift and go to state 9

    statements                     shift and go to state 54
    declaration                    shift and go to state 2
    whileloop                      shift and go to state 3
    doloop                         shift and go to state 4
    expression                     shift and go to state 5

state 35

    (11) conditionsp -> conditions AND . conditions
    (16) conditions -> . factor GT factor
    (17) conditions -> . factor LT factor
    (18) conditions -> . factor GTE factor
    (19) conditions -> . factor LTE factor
    (20) conditions -> . factor EQUAL factor
    (21) conditions -> . factor NEQ factor
    (8) factor -> . ID
    (9) factor -> . NUM

    ID              shift and go to state 22
    NUM             shift and go to state 23

    conditions                     shift and go to state 55
    factor                         shift and go to state 21

state 36

    (12) conditionsp -> conditions OR . conditions
    (16) conditions -> . factor GT factor
    (17) conditions -> . factor LT factor
    (18) conditions -> . factor GTE factor
    (19) conditions -> . factor LTE factor
    (20) conditions -> . factor EQUAL factor
    (21) conditions -> . factor NEQ factor
    (8) factor -> . ID
    (9) factor -> . NUM

    ID              shift and go to state 22
    NUM             shift and go to state 23

    conditions                     shift and go to state 56
    factor                         shift and go to state 21

state 37

    (16) conditions -> factor GT . factor
    (8) factor -> . ID
    (9) factor -> . NUM

    ID              shift and go to state 22
    NUM             shift and go to state 23

    factor                         shift and go to state 57

state 38

    (17) conditions -> factor LT . factor
    (8) factor -> . ID
    (9) factor -> . NUM

    ID              shift and go to state 22
    NUM             shift and go to state 23

    factor                         shift and go to state 58

state 39

    (18) conditions -> factor GTE . factor
    (8) factor -> . ID
    (9) factor -> . NUM

    ID              shift and go to state 22
    NUM             shift and go to state 23

    factor                         shift and go to state 59

state 40

    (19) conditions -> factor LTE . factor
    (8) factor -> . ID
    (9) factor -> . NUM

    ID              shift and go to state 22
    NUM             shift and go to state 23

    factor                         shift and go to state 60

state 41

    (20) conditions -> factor EQUAL . factor
    (8) factor -> . ID
    (9) factor -> . NUM

    ID              shift and go to state 22
    NUM             shift and go to state 23

    factor                         shift and go to state 61

state 42

    (21) conditions -> factor NEQ . factor
    (8) factor -> . ID
    (9) factor -> . NUM

    ID              shift and go to state 22
    NUM             shift and go to state 23

    factor                         shift and go to state 62

state 43

    (10) doloop -> LOOP LBRACE statements . RBRACE

    RBRACE          shift and go to state 63


state 44

    (22) expression -> ID ASSIGN exp . SEMICOLON
    (27) exp -> exp . ADDITION exp
    (28) exp -> exp . SUB exp
    (29) exp -> exp . MUL exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp

    SEMICOLON       shift and go to state 64
    ADDITION        shift and go to state 65
    SUB             shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69


state 45

    (32) exp -> LPAREN . exp RPAREN
    (27) exp -> . exp ADDITION exp
    (28) exp -> . exp SUB exp
    (29) exp -> . exp MUL exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . factor
    (8) factor -> . ID
    (9) factor -> . NUM

    LPAREN          shift and go to state 45
    ID              shift and go to state 22
    NUM             shift and go to state 23

    exp                            shift and go to state 70
    factor                         shift and go to state 46

state 46

    (33) exp -> factor .

    SEMICOLON       reduce using rule 33 (exp -> factor .)
    ADDITION        reduce using rule 33 (exp -> factor .)
    SUB             reduce using rule 33 (exp -> factor .)
    MUL             reduce using rule 33 (exp -> factor .)
    DIV             reduce using rule 33 (exp -> factor .)
    MOD             reduce using rule 33 (exp -> factor .)
    RPAREN          reduce using rule 33 (exp -> factor .)


state 47

    (23) expression -> ID ADD_ASSIGN exp . SEMICOLON
    (27) exp -> exp . ADDITION exp
    (28) exp -> exp . SUB exp
    (29) exp -> exp . MUL exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp

    SEMICOLON       shift and go to state 71
    ADDITION        shift and go to state 65
    SUB             shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69


state 48

    (24) expression -> ID SUB_ASSIGN exp . SEMICOLON
    (27) exp -> exp . ADDITION exp
    (28) exp -> exp . SUB exp
    (29) exp -> exp . MUL exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp

    SEMICOLON       shift and go to state 72
    ADDITION        shift and go to state 65
    SUB             shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69


state 49

    (25) expression -> ID DIV_ASSIGN exp . SEMICOLON
    (27) exp -> exp . ADDITION exp
    (28) exp -> exp . SUB exp
    (29) exp -> exp . MUL exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp

    SEMICOLON       shift and go to state 73
    ADDITION        shift and go to state 65
    SUB             shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69


state 50

    (26) expression -> ID MUL_ASSIGN exp . SEMICOLON
    (27) exp -> exp . ADDITION exp
    (28) exp -> exp . SUB exp
    (29) exp -> exp . MUL exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp

    SEMICOLON       shift and go to state 74
    ADDITION        shift and go to state 65
    SUB             shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69


state 51

    (7) declaration -> LET MUT var_list SEMICOLON .

    LET             reduce using rule 7 (declaration -> LET MUT var_list SEMICOLON .)
    WHILE           reduce using rule 7 (declaration -> LET MUT var_list SEMICOLON .)
    LOOP            reduce using rule 7 (declaration -> LET MUT var_list SEMICOLON .)
    ID              reduce using rule 7 (declaration -> LET MUT var_list SEMICOLON .)
    $end            reduce using rule 7 (declaration -> LET MUT var_list SEMICOLON .)
    RBRACE          reduce using rule 7 (declaration -> LET MUT var_list SEMICOLON .)


state 52

    (36) var_list -> ID COLON TYPE .
    (37) var_list -> ID COLON TYPE . COMMA var_list

    SEMICOLON       reduce using rule 36 (var_list -> ID COLON TYPE .)
    COMMA           shift and go to state 75


state 53

    (38) var_list -> ID COMMA var_list .

    SEMICOLON       reduce using rule 38 (var_list -> ID COMMA var_list .)


state 54

    (34) whileloop -> WHILE conditionsp LBRACE statements . RBRACE

    RBRACE          shift and go to state 76


state 55

    (11) conditionsp -> conditions AND conditions .

    LBRACE          reduce using rule 11 (conditionsp -> conditions AND conditions .)


state 56

    (12) conditionsp -> conditions OR conditions .

    LBRACE          reduce using rule 12 (conditionsp -> conditions OR conditions .)


state 57

    (16) conditions -> factor GT factor .

    AND             reduce using rule 16 (conditions -> factor GT factor .)
    OR              reduce using rule 16 (conditions -> factor GT factor .)
    LBRACE          reduce using rule 16 (conditions -> factor GT factor .)


state 58

    (17) conditions -> factor LT factor .

    AND             reduce using rule 17 (conditions -> factor LT factor .)
    OR              reduce using rule 17 (conditions -> factor LT factor .)
    LBRACE          reduce using rule 17 (conditions -> factor LT factor .)


state 59

    (18) conditions -> factor GTE factor .

    AND             reduce using rule 18 (conditions -> factor GTE factor .)
    OR              reduce using rule 18 (conditions -> factor GTE factor .)
    LBRACE          reduce using rule 18 (conditions -> factor GTE factor .)


state 60

    (19) conditions -> factor LTE factor .

    AND             reduce using rule 19 (conditions -> factor LTE factor .)
    OR              reduce using rule 19 (conditions -> factor LTE factor .)
    LBRACE          reduce using rule 19 (conditions -> factor LTE factor .)


state 61

    (20) conditions -> factor EQUAL factor .

    AND             reduce using rule 20 (conditions -> factor EQUAL factor .)
    OR              reduce using rule 20 (conditions -> factor EQUAL factor .)
    LBRACE          reduce using rule 20 (conditions -> factor EQUAL factor .)


state 62

    (21) conditions -> factor NEQ factor .

    AND             reduce using rule 21 (conditions -> factor NEQ factor .)
    OR              reduce using rule 21 (conditions -> factor NEQ factor .)
    LBRACE          reduce using rule 21 (conditions -> factor NEQ factor .)


state 63

    (10) doloop -> LOOP LBRACE statements RBRACE .

    LET             reduce using rule 10 (doloop -> LOOP LBRACE statements RBRACE .)
    WHILE           reduce using rule 10 (doloop -> LOOP LBRACE statements RBRACE .)
    LOOP            reduce using rule 10 (doloop -> LOOP LBRACE statements RBRACE .)
    ID              reduce using rule 10 (doloop -> LOOP LBRACE statements RBRACE .)
    $end            reduce using rule 10 (doloop -> LOOP LBRACE statements RBRACE .)
    RBRACE          reduce using rule 10 (doloop -> LOOP LBRACE statements RBRACE .)


state 64

    (22) expression -> ID ASSIGN exp SEMICOLON .

    LET             reduce using rule 22 (expression -> ID ASSIGN exp SEMICOLON .)
    WHILE           reduce using rule 22 (expression -> ID ASSIGN exp SEMICOLON .)
    LOOP            reduce using rule 22 (expression -> ID ASSIGN exp SEMICOLON .)
    ID              reduce using rule 22 (expression -> ID ASSIGN exp SEMICOLON .)
    $end            reduce using rule 22 (expression -> ID ASSIGN exp SEMICOLON .)
    RBRACE          reduce using rule 22 (expression -> ID ASSIGN exp SEMICOLON .)


state 65

    (27) exp -> exp ADDITION . exp
    (27) exp -> . exp ADDITION exp
    (28) exp -> . exp SUB exp
    (29) exp -> . exp MUL exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . factor
    (8) factor -> . ID
    (9) factor -> . NUM

    LPAREN          shift and go to state 45
    ID              shift and go to state 22
    NUM             shift and go to state 23

    exp                            shift and go to state 77
    factor                         shift and go to state 46

state 66

    (28) exp -> exp SUB . exp
    (27) exp -> . exp ADDITION exp
    (28) exp -> . exp SUB exp
    (29) exp -> . exp MUL exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . factor
    (8) factor -> . ID
    (9) factor -> . NUM

    LPAREN          shift and go to state 45
    ID              shift and go to state 22
    NUM             shift and go to state 23

    exp                            shift and go to state 78
    factor                         shift and go to state 46

state 67

    (29) exp -> exp MUL . exp
    (27) exp -> . exp ADDITION exp
    (28) exp -> . exp SUB exp
    (29) exp -> . exp MUL exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . factor
    (8) factor -> . ID
    (9) factor -> . NUM

    LPAREN          shift and go to state 45
    ID              shift and go to state 22
    NUM             shift and go to state 23

    exp                            shift and go to state 79
    factor                         shift and go to state 46

state 68

    (30) exp -> exp DIV . exp
    (27) exp -> . exp ADDITION exp
    (28) exp -> . exp SUB exp
    (29) exp -> . exp MUL exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . factor
    (8) factor -> . ID
    (9) factor -> . NUM

    LPAREN          shift and go to state 45
    ID              shift and go to state 22
    NUM             shift and go to state 23

    exp                            shift and go to state 80
    factor                         shift and go to state 46

state 69

    (31) exp -> exp MOD . exp
    (27) exp -> . exp ADDITION exp
    (28) exp -> . exp SUB exp
    (29) exp -> . exp MUL exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . LPAREN exp RPAREN
    (33) exp -> . factor
    (8) factor -> . ID
    (9) factor -> . NUM

    LPAREN          shift and go to state 45
    ID              shift and go to state 22
    NUM             shift and go to state 23

    exp                            shift and go to state 81
    factor                         shift and go to state 46

state 70

    (32) exp -> LPAREN exp . RPAREN
    (27) exp -> exp . ADDITION exp
    (28) exp -> exp . SUB exp
    (29) exp -> exp . MUL exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp

    RPAREN          shift and go to state 82
    ADDITION        shift and go to state 65
    SUB             shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69


state 71

    (23) expression -> ID ADD_ASSIGN exp SEMICOLON .

    LET             reduce using rule 23 (expression -> ID ADD_ASSIGN exp SEMICOLON .)
    WHILE           reduce using rule 23 (expression -> ID ADD_ASSIGN exp SEMICOLON .)
    LOOP            reduce using rule 23 (expression -> ID ADD_ASSIGN exp SEMICOLON .)
    ID              reduce using rule 23 (expression -> ID ADD_ASSIGN exp SEMICOLON .)
    $end            reduce using rule 23 (expression -> ID ADD_ASSIGN exp SEMICOLON .)
    RBRACE          reduce using rule 23 (expression -> ID ADD_ASSIGN exp SEMICOLON .)


state 72

    (24) expression -> ID SUB_ASSIGN exp SEMICOLON .

    LET             reduce using rule 24 (expression -> ID SUB_ASSIGN exp SEMICOLON .)
    WHILE           reduce using rule 24 (expression -> ID SUB_ASSIGN exp SEMICOLON .)
    LOOP            reduce using rule 24 (expression -> ID SUB_ASSIGN exp SEMICOLON .)
    ID              reduce using rule 24 (expression -> ID SUB_ASSIGN exp SEMICOLON .)
    $end            reduce using rule 24 (expression -> ID SUB_ASSIGN exp SEMICOLON .)
    RBRACE          reduce using rule 24 (expression -> ID SUB_ASSIGN exp SEMICOLON .)


state 73

    (25) expression -> ID DIV_ASSIGN exp SEMICOLON .

    LET             reduce using rule 25 (expression -> ID DIV_ASSIGN exp SEMICOLON .)
    WHILE           reduce using rule 25 (expression -> ID DIV_ASSIGN exp SEMICOLON .)
    LOOP            reduce using rule 25 (expression -> ID DIV_ASSIGN exp SEMICOLON .)
    ID              reduce using rule 25 (expression -> ID DIV_ASSIGN exp SEMICOLON .)
    $end            reduce using rule 25 (expression -> ID DIV_ASSIGN exp SEMICOLON .)
    RBRACE          reduce using rule 25 (expression -> ID DIV_ASSIGN exp SEMICOLON .)


state 74

    (26) expression -> ID MUL_ASSIGN exp SEMICOLON .

    LET             reduce using rule 26 (expression -> ID MUL_ASSIGN exp SEMICOLON .)
    WHILE           reduce using rule 26 (expression -> ID MUL_ASSIGN exp SEMICOLON .)
    LOOP            reduce using rule 26 (expression -> ID MUL_ASSIGN exp SEMICOLON .)
    ID              reduce using rule 26 (expression -> ID MUL_ASSIGN exp SEMICOLON .)
    $end            reduce using rule 26 (expression -> ID MUL_ASSIGN exp SEMICOLON .)
    RBRACE          reduce using rule 26 (expression -> ID MUL_ASSIGN exp SEMICOLON .)


state 75

    (37) var_list -> ID COLON TYPE COMMA . var_list
    (35) var_list -> . ID
    (36) var_list -> . ID COLON TYPE
    (37) var_list -> . ID COLON TYPE COMMA var_list
    (38) var_list -> . ID COMMA var_list

    ID              shift and go to state 16

    var_list                       shift and go to state 83

state 76

    (34) whileloop -> WHILE conditionsp LBRACE statements RBRACE .

    LET             reduce using rule 34 (whileloop -> WHILE conditionsp LBRACE statements RBRACE .)
    WHILE           reduce using rule 34 (whileloop -> WHILE conditionsp LBRACE statements RBRACE .)
    LOOP            reduce using rule 34 (whileloop -> WHILE conditionsp LBRACE statements RBRACE .)
    ID              reduce using rule 34 (whileloop -> WHILE conditionsp LBRACE statements RBRACE .)
    $end            reduce using rule 34 (whileloop -> WHILE conditionsp LBRACE statements RBRACE .)
    RBRACE          reduce using rule 34 (whileloop -> WHILE conditionsp LBRACE statements RBRACE .)


state 77

    (27) exp -> exp ADDITION exp .
    (27) exp -> exp . ADDITION exp
    (28) exp -> exp . SUB exp
    (29) exp -> exp . MUL exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp

  ! shift/reduce conflict for ADDITION resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    SEMICOLON       reduce using rule 27 (exp -> exp ADDITION exp .)
    RPAREN          reduce using rule 27 (exp -> exp ADDITION exp .)
    ADDITION        shift and go to state 65
    SUB             shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69

  ! ADDITION        [ reduce using rule 27 (exp -> exp ADDITION exp .) ]
  ! SUB             [ reduce using rule 27 (exp -> exp ADDITION exp .) ]
  ! MUL             [ reduce using rule 27 (exp -> exp ADDITION exp .) ]
  ! DIV             [ reduce using rule 27 (exp -> exp ADDITION exp .) ]
  ! MOD             [ reduce using rule 27 (exp -> exp ADDITION exp .) ]


state 78

    (28) exp -> exp SUB exp .
    (27) exp -> exp . ADDITION exp
    (28) exp -> exp . SUB exp
    (29) exp -> exp . MUL exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp

  ! shift/reduce conflict for ADDITION resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    SEMICOLON       reduce using rule 28 (exp -> exp SUB exp .)
    RPAREN          reduce using rule 28 (exp -> exp SUB exp .)
    ADDITION        shift and go to state 65
    SUB             shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69

  ! ADDITION        [ reduce using rule 28 (exp -> exp SUB exp .) ]
  ! SUB             [ reduce using rule 28 (exp -> exp SUB exp .) ]
  ! MUL             [ reduce using rule 28 (exp -> exp SUB exp .) ]
  ! DIV             [ reduce using rule 28 (exp -> exp SUB exp .) ]
  ! MOD             [ reduce using rule 28 (exp -> exp SUB exp .) ]


state 79

    (29) exp -> exp MUL exp .
    (27) exp -> exp . ADDITION exp
    (28) exp -> exp . SUB exp
    (29) exp -> exp . MUL exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp

  ! shift/reduce conflict for ADDITION resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    SEMICOLON       reduce using rule 29 (exp -> exp MUL exp .)
    RPAREN          reduce using rule 29 (exp -> exp MUL exp .)
    ADDITION        shift and go to state 65
    SUB             shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69

  ! ADDITION        [ reduce using rule 29 (exp -> exp MUL exp .) ]
  ! SUB             [ reduce using rule 29 (exp -> exp MUL exp .) ]
  ! MUL             [ reduce using rule 29 (exp -> exp MUL exp .) ]
  ! DIV             [ reduce using rule 29 (exp -> exp MUL exp .) ]
  ! MOD             [ reduce using rule 29 (exp -> exp MUL exp .) ]


state 80

    (30) exp -> exp DIV exp .
    (27) exp -> exp . ADDITION exp
    (28) exp -> exp . SUB exp
    (29) exp -> exp . MUL exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp

  ! shift/reduce conflict for ADDITION resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    SEMICOLON       reduce using rule 30 (exp -> exp DIV exp .)
    RPAREN          reduce using rule 30 (exp -> exp DIV exp .)
    ADDITION        shift and go to state 65
    SUB             shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69

  ! ADDITION        [ reduce using rule 30 (exp -> exp DIV exp .) ]
  ! SUB             [ reduce using rule 30 (exp -> exp DIV exp .) ]
  ! MUL             [ reduce using rule 30 (exp -> exp DIV exp .) ]
  ! DIV             [ reduce using rule 30 (exp -> exp DIV exp .) ]
  ! MOD             [ reduce using rule 30 (exp -> exp DIV exp .) ]


state 81

    (31) exp -> exp MOD exp .
    (27) exp -> exp . ADDITION exp
    (28) exp -> exp . SUB exp
    (29) exp -> exp . MUL exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp

  ! shift/reduce conflict for ADDITION resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    SEMICOLON       reduce using rule 31 (exp -> exp MOD exp .)
    RPAREN          reduce using rule 31 (exp -> exp MOD exp .)
    ADDITION        shift and go to state 65
    SUB             shift and go to state 66
    MUL             shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69

  ! ADDITION        [ reduce using rule 31 (exp -> exp MOD exp .) ]
  ! SUB             [ reduce using rule 31 (exp -> exp MOD exp .) ]
  ! MUL             [ reduce using rule 31 (exp -> exp MOD exp .) ]
  ! DIV             [ reduce using rule 31 (exp -> exp MOD exp .) ]
  ! MOD             [ reduce using rule 31 (exp -> exp MOD exp .) ]


state 82

    (32) exp -> LPAREN exp RPAREN .

    SEMICOLON       reduce using rule 32 (exp -> LPAREN exp RPAREN .)
    ADDITION        reduce using rule 32 (exp -> LPAREN exp RPAREN .)
    SUB             reduce using rule 32 (exp -> LPAREN exp RPAREN .)
    MUL             reduce using rule 32 (exp -> LPAREN exp RPAREN .)
    DIV             reduce using rule 32 (exp -> LPAREN exp RPAREN .)
    MOD             reduce using rule 32 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 32 (exp -> LPAREN exp RPAREN .)


state 83

    (37) var_list -> ID COLON TYPE COMMA var_list .

    SEMICOLON       reduce using rule 37 (var_list -> ID COLON TYPE COMMA var_list .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ADDITION in state 77 resolved as shift
WARNING: shift/reduce conflict for SUB in state 77 resolved as shift
WARNING: shift/reduce conflict for MUL in state 77 resolved as shift
WARNING: shift/reduce conflict for DIV in state 77 resolved as shift
WARNING: shift/reduce conflict for MOD in state 77 resolved as shift
WARNING: shift/reduce conflict for ADDITION in state 78 resolved as shift
WARNING: shift/reduce conflict for SUB in state 78 resolved as shift
WARNING: shift/reduce conflict for MUL in state 78 resolved as shift
WARNING: shift/reduce conflict for DIV in state 78 resolved as shift
WARNING: shift/reduce conflict for MOD in state 78 resolved as shift
WARNING: shift/reduce conflict for ADDITION in state 79 resolved as shift
WARNING: shift/reduce conflict for SUB in state 79 resolved as shift
WARNING: shift/reduce conflict for MUL in state 79 resolved as shift
WARNING: shift/reduce conflict for DIV in state 79 resolved as shift
WARNING: shift/reduce conflict for MOD in state 79 resolved as shift
WARNING: shift/reduce conflict for ADDITION in state 80 resolved as shift
WARNING: shift/reduce conflict for SUB in state 80 resolved as shift
WARNING: shift/reduce conflict for MUL in state 80 resolved as shift
WARNING: shift/reduce conflict for DIV in state 80 resolved as shift
WARNING: shift/reduce conflict for MOD in state 80 resolved as shift
WARNING: shift/reduce conflict for ADDITION in state 81 resolved as shift
WARNING: shift/reduce conflict for SUB in state 81 resolved as shift
WARNING: shift/reduce conflict for MUL in state 81 resolved as shift
WARNING: shift/reduce conflict for DIV in state 81 resolved as shift
WARNING: shift/reduce conflict for MOD in state 81 resolved as shift
